"""
Добавьте к программе DIR FUZZER из предыдущего урока (код из любого
задания, кроме первого) следующие опции
-b64
преобразует нагрузку в формат base64
-hex
преобразует нагрузку в формат hex вида
"\x70\x68\x70\x69\x6e\x66\x6f\x28\x29\x3b"
-uenc преобразует нагрузку в формат urlencode
-head отправляет вместе с нагрузкой заголовки HTTP, заголовки заключать
можно в одинарные или двойные кавычки.
Соответствующий запуск программы может выглядеть так:
python fuzzer.py -u https://site.com/FUZZ -w /usr/share/wordlists/dirbuster/directory-list-
2.3-medium –head "Cookie: bla-bla-bla " -b64
Если нужно передать более одного заголовка, то использовать в качестве
разделителя запятую. Обратите внимание, что после запятой может стоять
пробел. Учитывайте этот момент.
–head "Cookie: bla-bla-bla, User-Agent: Googlebot-News "
"""

import requests as r
import sys
import os
import argparse as a
from colorama import Fore as F
import base64 as b64
import urllib.parse as up

DOMAIN = ""
DIRS = []

parser = a.ArgumentParser(description='Dir Fuzzer')

parser.add_argument('-u', dest='website', help='Enter domain https://site.com', required=True)
parser.add_argument('-w', dest='wordlist', help='Name and path the wordlist', required=True)
parser.add_argument('-b64', dest='b64', help='преобразует нагрузку в формат base64', required=False, const="default", nargs='?')
parser.add_argument('-hex', dest='hex', help='преобразует нагрузку в формат hex вида', required=False, const="default", nargs='?')
parser.add_argument('-uenc', dest='uenc', help='преобразует нагрузку в формат urlencode', required=False, const="default", nargs='?')
parser.add_argument('--head', help='отправляет вместе с нагрузкой заголовки HTTP, заголовки заключать можно в одинарные или двойные кавычки.', const="default", nargs='?')

args = parser.parse_args()

def greetings():
    """Функция отображает приветствие пользователя"""
    print(F.GREEN + '''
╔═══╗╔══╗╔═══╗     ╔═══╗╔╗─╔╗╔════╗╔════╗╔═══╗╔═══╗
╚╗╔╗║╚╣║╝║╔═╗║     ║╔══╝║║─║║╚══╗═║╚══╗═║║╔══╝║╔═╗║
─║║║║─║║─║╚═╝║     ║╚══╗║║─║║──╔╝╔╝──╔╝╔╝║╚══╗║╚═╝║
─║║║║─║║─║╔╗╔╝     ║╔══╝║║─║║─╔╝╔╝──╔╝╔╝─║╔══╝║╔╗╔╝
╔╝╚╝║╔╣║╗║║║╚╗     ║║───║╚═╝║╔╝═╚═╗╔╝═╚═╗║╚══╗║║║╚╗
╚═══╝╚══╝╚╝╚═╝     ╚╝───╚═══╝╚════╝╚════╝╚═══╝╚╝╚═╝
          ''' + F.RESET)


def check_wordlist_file(path_to_wordlist):
    """Функция проверяет наличие файла со словарём"""
    if not os.path.isfile(path_to_wordlist.replace("\'", "")):
        print(f"{path_to_wordlist}\nФайл со словарём не найден.")
        sys.exit(0)
    fill_dirs_from_file(args.wordlist)


def check_site_annotaion(hostname):
    """Функция проверяет есть ли коннект с хостом"""
    try:
        response = r.get(hostname, headers={
            "User-Agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36"},
                                timeout=1)
        response.raise_for_status()
        if response.status_code == 200:
            print('OK!')
    except (r.exceptions.HTTPError, r.exceptions.Timeout) as e:
        print('ERROR: %s' % e)

    set_url_format()


def set_url_format():
    """Функция проверяет форматирование url сайта"""
    global DOMAIN
    DOMAIN = args.website.replace('/FUZZ', '/')


def check_app_keys():
    """Функция проверяет правильность аргументов"""
    if args.wordlist and args.website:
        check_wordlist_file(args.wordlist)
        check_site_annotaion(args.website[:-4])
        print(f"\nРаботаем с сайтом {args.website}. Путь к словарю {args.wordlist}\n")
    else:
        print(
            'To use the program, specify the domain and wordlist https://site.com /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt')
        parser.print_help()
        sys.exit(0)


def fill_dirs_from_file(dirs_file):
    """Функция читает файл с адресами папок в список"""
    with open(dirs_file, "r") as reader:
        for line in reader.readlines():
            if args.b64:
                line = (b64.b64encode(line.encode('utf-8')).decode('utf-8'))
            elif args.hex:
                line = ('\\x'.join((line.encode('utf-8')).hex()[i:i + 2] for i in range(-2, len((line.encode('utf-8')).hex()), 2)))
            elif args.uenc:
                line = (up.quote(line))
            DIRS.append(line)
    print("\nЗагружено строк из словаря: " + str(len(DIRS)) + "\n")

def make_headers_dirs():
    if args.head:
        return {i.split(': ')[0]: i.split(': ')[1] for i in args.head.split(', ')}

def get_site_dirs():
    """Функция проверки директорий"""
    counter = 0
    try:
        for target_dir in DIRS:
            target_url = DOMAIN + target_dir.strip() + "/"
            host_answer = r.get(target_url, params=make_headers_dirs())
            counter += 1
            if host_answer.status_code == 404:
                print(f"{counter:0>9} of {len(DIRS)}\t{host_answer.status_code}\t{target_url}", end='          \r')
            elif host_answer.status_code == 200:
                print(f"{counter:0>9} of {len(DIRS)}\t{F.GREEN + str(host_answer.status_code) + F.RESET}\t{target_url}")
            elif host_answer.status_code == 403:
                print(f"{counter:0>9} of {len(DIRS)}\t{F.RED + str(host_answer.status_code) + F.RESET}\t{target_url}")
            else:
                print(f"{counter:0>9} of {len(DIRS)}\t{host_answer.status_code}\t{target_url}")
    except KeyboardInterrupt:
        print(F.RED + '\nERROR: manually stop Ctrl+C' + F.RESET)


if __name__ == "__main__":
    check_app_keys()
    greetings()
    get_site_dirs()