"""
Сделать аналогичную программу как в задании 1, используя модуль argparse или
click на выбор. При запуске без аргументов выводится справка.Программа должна принимать следующие аргументы:
-u адрес хоста
-w имя и путь вордлиста
А FUZZ это место, которое замещается полезной нагрузкой из вордлиста
"""

import requests
import sys
import os
import argparse as a

DOMAIN = ""
DIRS = []

parser = a.ArgumentParser(description='Dir Fuzzer')

parser.add_argument('-u', dest='website', help='Enter domain https://site.com')
parser.add_argument('-w', dest='wordlist', help='Name and path the wordlist')

args = parser.parse_args()


def greetings():
    """Функция отображает приветствие пользователя"""
    print('''
╔═══╗╔══╗╔═══╗     ╔═══╗╔╗─╔╗╔════╗╔════╗╔═══╗╔═══╗
╚╗╔╗║╚╣║╝║╔═╗║     ║╔══╝║║─║║╚══╗═║╚══╗═║║╔══╝║╔═╗║
─║║║║─║║─║╚═╝║     ║╚══╗║║─║║──╔╝╔╝──╔╝╔╝║╚══╗║╚═╝║
─║║║║─║║─║╔╗╔╝     ║╔══╝║║─║║─╔╝╔╝──╔╝╔╝─║╔══╝║╔╗╔╝
╔╝╚╝║╔╣║╗║║║╚╗     ║║───║╚═╝║╔╝═╚═╗╔╝═╚═╗║╚══╗║║║╚╗
╚═══╝╚══╝╚╝╚═╝     ╚╝───╚═══╝╚════╝╚════╝╚═══╝╚╝╚═╝
          ''')


def check_wordlist_file(path_to_wordlist):
    """Функция проверяет наличие файла со словарём"""
    if not os.path.isfile(path_to_wordlist.replace("\'", "")):
        print(f"{path_to_wordlist}\nФайл со словарём не найден.")
        sys.exit(0)
    fill_dirs_from_file(args.wordlist)


def check_site_annotaion(hostname):
    """Функция проверяет есть ли коннект с хостом"""
    try:
        response = requests.get(hostname, headers={
            "User-Agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36"},
                                timeout=1)
        response.raise_for_status()
        if response.status_code == 200:
            print('OK!')
    except (requests.exceptions.HTTPError, requests.exceptions.Timeout) as e:
        print('ERROR: %s' % e)

    set_url_format(args.website)


def set_url_format(hostname):
    """Функция проверяет форматирование url сайта"""
    global DOMAIN
    DOMAIN = hostname.replace('/FUZZ', '/')


def check_app_keys():
    """Функция проверяет правильность аргументов"""
    if args.wordlist and args.website:
        check_wordlist_file(args.wordlist)
        check_site_annotaion(args.website[:-4])
        greetings()
        print(f"\nРаботаем с сайтом {args.website[:-4]}. Путь к словарю {args.wordlist}\n")
    else:
        print(
            'To use the program, specify the domain and wordlist https://site.com /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt')
        sys.exit(0)


def fill_dirs_from_file(dirs_file):
    """Функция читает файл с адресами папок в список"""
    with open(dirs_file, "r") as reader:
        for line in reader.readlines():
            DIRS.append(line)
    print("\nЗагружено строк из словаря: " + str(len(DIRS)) + "\n")


def get_site_dirs():
    """Функция проверки директорий"""
    counter = 0
    try:
        for target_dir in DIRS:
            target_url = DOMAIN + target_dir.strip() + "/"
            host_answer = requests.get(target_url)
            counter += 1
            if host_answer.status_code == 404:
                continue
            else:
                print(f"{counter} of {len(DIRS)}\t{host_answer.status_code}\t{target_url}")
    except KeyboardInterrupt:
        print('  ERROR: manually stop Ctrl+C')


if __name__ == "__main__":
    check_app_keys()
    get_site_dirs()